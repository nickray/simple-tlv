var searchIndex = JSON.parse('{\
"simple_tlv":{"doc":"simple-tlvFrom ISO 7816-4:2005:","i":[[3,"TaggedSlice","simple_tlv","SIMPLE-TLV data object",null,null],[3,"Decoder","","SIMPLE-TLV decoder.",null,null],[3,"Encoder","","SIMPLE-TLV encoder.",null,null],[3,"Error","","Error type",null,null],[4,"ErrorKind","","Error type.",null,null],[13,"Failed","","Operation failed due to previous error",0,null],[13,"InvalidTag","","Invalid tag",0,null],[12,"byte","simple_tlv::ErrorKind","Raw byte value of the tag",1,null],[13,"InvalidLength","simple_tlv","Length greater than u16::MAX",0,null],[13,"Length","","Incorrect length for a given field",0,null],[12,"tag","simple_tlv::ErrorKind","Tag type of the value being decoded",2,null],[13,"Overflow","simple_tlv","Integer overflow occurred (library bug!)",0,null],[13,"Overlength","","Message is longer than SIMPLE-TLV\'s limits support",0,null],[13,"TrailingData","","Undecoded trailing data at end of message",0,null],[12,"decoded","simple_tlv::ErrorKind","Length of the decoded data",3,null],[12,"remaining","","Total length of the remaining data left in the buffer",3,null],[13,"Truncated","simple_tlv","Unexpected end-of-message/nested field when decoding",0,null],[13,"Underlength","","Encoded message is shorter than the expected length (i.e. …",0,null],[12,"expected","simple_tlv::ErrorKind","Expected length",4,null],[12,"actual","","Actual length",4,null],[13,"UnexpectedTag","simple_tlv","Unexpected tag",0,null],[12,"expected","simple_tlv::ErrorKind","Tag the decoder was expecting (if there is a single such …",5,null],[12,"actual","","Actual tag encountered in the message",5,null],[6,"Result","simple_tlv","Result type.",null,null],[3,"Length","","SIMPLE-TLV-encoded length.",null,null],[3,"Nested","","Nested SIMPLE-TLV data objects.",null,null],[3,"Tag","","The tag field consists of a single byte encoding a tag …",null,null],[8,"Decodable","","Decoding trait.",null,null],[10,"decode","","Attempt to decode this message using the provided decoder.",6,[[["decoder",3]],["result",6]]],[11,"from_bytes","","Parse <code>Self</code> from the provided byte slice.",6,[[],["result",6]]],[8,"Encodable","","Encoding trait.",null,null],[10,"encoded_len","","Compute the length of this value in bytes when encoded as …",7,[[],[["result",6],["length",3]]]],[10,"encode","","Encode this value as SIMPLE-TLV using the provided […",7,[[["encoder",3]],["result",6]]],[11,"encode_to_slice","","Encode this value to the provided byte slice, returning a …",7,[[],["result",6]]],[3,"Tagged","","",null,null],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"decode","","",11,[[["decoder",3]],[["result",6],["length",3]]]],[11,"decode","","",13,[[["decoder",3]],["result",6]]],[11,"decode","","",14,[[["decoder",3]],[["result",6],["taggedslice",3]]]],[11,"encoded_len","","",11,[[],[["result",6],["length",3]]]],[11,"encode","","",11,[[["encoder",3]],["result",6]]],[11,"encoded_len","","",12,[[],[["result",6],["length",3]]]],[11,"encode","","",12,[[["encoder",3]],["result",6]]],[11,"encoded_len","","",13,[[],[["result",6],["length",3]]]],[11,"encode","","",13,[[["encoder",3]],["result",6]]],[11,"encoded_len","","",14,[[],[["result",6],["length",3]]]],[11,"encode","","",14,[[["encoder",3]],["result",6]]],[11,"encoded_len","","",15,[[],[["result",6],["length",3]]]],[11,"encode","","",15,[[["encoder",3]],["result",6]]],[11,"from","","",8,[[],["decoder",3]]],[11,"from","","",10,[[["errorkind",4]],["error",3]]],[11,"from","","",10,[[["infallible",4]],["error",3]]],[11,"from","","",11,[[],["length",3]]],[11,"from","","",11,[[],["length",3]]],[11,"from","","",12,[[["taggedslice",3]],["nested",3]]],[11,"from","","",14,[[["nested",3]],["taggedslice",3]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"eq","","",10,[[["error",3]]]],[11,"ne","","",10,[[["error",3]]]],[11,"eq","","",0,[[["errorkind",4]]]],[11,"ne","","",0,[[["errorkind",4]]]],[11,"eq","","",11,[[["length",3]]]],[11,"ne","","",11,[[["length",3]]]],[11,"eq","","",12,[[["nested",3]]]],[11,"ne","","",12,[[["nested",3]]]],[11,"eq","","",13,[[["tag",3]]]],[11,"ne","","",13,[[["tag",3]]]],[11,"eq","","",14,[[["taggedslice",3]]]],[11,"ne","","",14,[[["taggedslice",3]]]],[11,"eq","","",15,[[["tagged",3]]]],[11,"ne","","",15,[[["tagged",3]]]],[11,"cmp","","",11,[[["length",3]],["ordering",4]]],[11,"partial_cmp","","",11,[[["length",3]],[["option",4],["ordering",4]]]],[11,"lt","","",11,[[["length",3]]]],[11,"le","","",11,[[["length",3]]]],[11,"gt","","",11,[[["length",3]]]],[11,"ge","","",11,[[["length",3]]]],[11,"add","","",11,[[],["result",6]]],[11,"add","","",11,[[],["result",6]]],[11,"add","","",11,[[],["result",6]]],[11,"add","","",11,[[],["result",6]]],[11,"add","","",16,[[["length",3]]]],[11,"try_from","","",11,[[],[["result",6],["length",3]]]],[11,"try_from","","",13,[[],["result",6]]],[11,"as_ref","","",12,[[]]],[11,"clone","","",10,[[],["error",3]]],[11,"clone","","",0,[[],["errorkind",4]]],[11,"clone","","",11,[[],["length",3]]],[11,"clone","","",12,[[],["nested",3]]],[11,"clone","","",13,[[],["tag",3]]],[11,"clone","","",14,[[],["taggedslice",3]]],[11,"clone","","",15,[[],["tagged",3]]],[11,"default","","",11,[[],["length",3]]],[11,"new","","Create a new decoder for the given byte slice.",8,[[]]],[11,"decode","","Decode a value which impls the [<code>Decodable</code>] trait.",8,[[],[["result",6],["decodable",8]]]],[11,"decode_tag","","",8,[[["tag",3]],[["result",6],["decodable",8]]]],[11,"error","","Return an error with the given [<code>ErrorKind</code>], annotating it …",8,[[["errorkind",4]],["result",6]]],[11,"is_failed","","Did the decoding operation fail due to an error?",8,[[]]],[11,"finish","","Finish decoding, returning the given value if there is no …",8,[[],["result",6]]],[11,"is_finished","","Have we decoded all of the bytes in this [<code>Decoder</code>]?",8,[[]]],[11,"new","","Create a new encoder with the given byte slice as a …",9,[[]]],[11,"encode","","Encode a value which impls the [<code>Encodable</code>] trait.",9,[[],["result",6]]],[11,"error","","Return an error with the given [<code>ErrorKind</code>], annotating it …",9,[[["errorkind",4]],["result",6]]],[11,"is_failed","","Did the decoding operation fail due to an error?",9,[[]]],[11,"finish","","Finish encoding to the buffer, returning a slice …",9,[[],["result",6]]],[11,"nested","","Encode a collection of values which impl the [<code>Encodable</code>] …",9,[[["tag",3]],["result",6]]],[11,"new","","Create a new [<code>Error</code>]",10,[[["errorkind",4],["length",3]],["error",3]]],[11,"kind","","Get the [<code>ErrorKind</code>] which occurred.",10,[[],["errorkind",4]]],[11,"position","","Get the position inside of the message where the error …",10,[[],[["option",4],["length",3]]]],[11,"nested","","For errors occurring inside of a nested message, extend …",10,[[["length",3]]]],[11,"at","","Annotate an [<code>ErrorKind</code>] with context about where it …",0,[[["length",3]],["error",3]]],[11,"zero","","Return a length of <code>0</code>.",11,[[]]],[11,"max","","Get the maximum length supported by this crate",11,[[]]],[11,"to_usize","","Convert length to <code>usize</code>",11,[[]]],[11,"new","","Create a new [<code>Nested</code>] from a slice",12,[[["tag",3]],["result",6]]],[11,"as_bytes","","Borrow the inner byte sequence",12,[[]]],[11,"tag","","Get Tag",12,[[],["tag",3]]],[11,"decode_nested","","Decode nested values, creating a new [<code>Decoder</code>] for the …",12,[[],["result",6]]],[11,"assert_eq","","Assert that this [<code>Tag</code>] matches the provided expected tag.",13,[[["tag",3]],[["tag",3],["result",6]]]],[11,"new","","Create a new tagged slice, checking lengths.",14,[[["tag",3]],["result",6]]],[11,"as_bytes","","Borrow the inner byte slice.",14,[[]]],[11,"tag","","",14,[[],["tag",3]]],[11,"len","","Get the length of the inner byte slice.",14,[[],["length",3]]],[11,"is_empty","","Is the inner byte slice empty?",14,[[]]],[11,"nested","","Attempt to decode this value as nested TaggedSlices, …",14,[[],["result",6]]],[11,"from_bytes","","Parse <code>Self</code> from the provided byte slice.",6,[[],["result",6]]],[11,"encode_to_slice","","Encode this value to the provided byte slice, returning a …",7,[[],["result",6]]],[11,"from","","",15,[[["tag",3]]]]],"p":[[4,"ErrorKind"],[13,"InvalidTag"],[13,"Length"],[13,"TrailingData"],[13,"Underlength"],[13,"UnexpectedTag"],[8,"Decodable"],[8,"Encodable"],[3,"Decoder"],[3,"Encoder"],[3,"Error"],[3,"Length"],[3,"Nested"],[3,"Tag"],[3,"TaggedSlice"],[3,"Tagged"],[6,"Result"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);